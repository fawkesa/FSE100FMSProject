let typedWord = ''; 
let targetWord; 
let lastTargetWord = ''; // Store the last target word to avoid repetition
let progress = 0; 
const maxProgress = 100; 
const lineHeight = 250; 
let lineColor = [0, 0, 0];
const progressBarHeight = 20; 

function setup() {
  createCanvas(800, 300);
  textAlign(CENTER, CENTER);
  textSize(32);
  targetWord = getRandomWordOrSentence(); // Use a new function to determine the initial target word
}

function draw() {
  background(220);
  text("Type: " + targetWord, width / 2, height / 3);
  
  // Draw the progress line with dynamic color
  stroke(lineColor[0], lineColor[1], lineColor[2]);
  strokeWeight(4);
  line(100, lineHeight, 100 + (progress / maxProgress) * (width - 200), lineHeight);
  
  // Draw the progress bar and percentage
  drawProgressBar();

  // Draw the box for the currently typed word and display the typed word
  fill(255); // White background for the typed word box
  noStroke();
  rect(width / 2 - 150, 2 * height / 3, 300, 50); // Adjust the size and position as needed
  
  fill(0); // Black color for the text
  text(typedWord, width / 2, 2 * height / 3 + 25); // Center the typed word in the box
}

function keyPressed() {
  if (keyCode === BACKSPACE) {
    typedWord = typedWord.slice(0, -1);
  } else if (keyCode === ENTER) {
    if (typedWord.toUpperCase() === targetWord.toUpperCase()) {
      lineColor = [0, 255, 0]; // Green
      progress += 10;
      if (progress >= maxProgress) {
        progress = 0; // Reset progress if it reaches or exceeds 100%
      }
      lastTargetWord = targetWord; // Remember the last word
      targetWord = getRandomWordOrSentence(); // Get a new target based on current progress
    } else {
      lineColor = [255, 0, 0]; // Red
      progress = max(0, progress - 10);
    }
    typedWord = ''; // Reset typed word for next input
  } else if (keyCode >= 32 && keyCode <= 126) {
    typedWord += key;
  }
}

function getRandomWordOrSentence() {
  const names = ['Alice', 'Bob', 'Charlie', 'Diana', 'Evan', 'Fiona', 'George'];
  const sentences = [
    'The quick brown fox jumps over the lazy dog',
    'A journey of a thousand miles begins with a single step',
    'Better late than never',
    'Easy come easy go'
  ];
  let newTarget;
  do {
    if (progress > 50) {
      newTarget = sentences[int(random(sentences.length))];
    } else {
      newTarget = names[int(random(names.length))];
    }
  } while (newTarget === lastTargetWord);
  return newTarget;
}

function drawProgressBar() {
  noStroke();
  fill(100); // Dark grey background for the progress bar
  rect(100, height - progressBarHeight - 10, width - 200, progressBarHeight);
  
  fill(0, 255, 0); // Green fill for progress
  let progressBarWidth = (progress / maxProgress) * (width - 200);
  rect(100, height - progressBarHeight - 10, progressBarWidth, progressBarHeight);

  // Display the progress percentage
  fill(0); // Black color for the text
  textSize(16); // Smaller text for the percentage
  text(`${progress}%`, 100 + progressBarWidth / 2, height - progressBarHeight / 2 - 5);
  textSize(32); // Reset to default text size for other uses
}
